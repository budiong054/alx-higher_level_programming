The ``2-matrix_divided`` module
===============================

Using ``matrix_divided``
------------------------

First import ``matrix_divided`` from the ``2-matrix_divided`` module:

	>>> matrix_divided = __import__('2-matrix_divided').matrix_divided

Now the test case:=>

Case 1: When a non list type is passed as a `matrix` argument
	
	>>> matrix_divided(True, 4)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

case 2: When a `list` contains a type different from `int` or `float`

	>>> matrix = [
	... 	[1, "2", "a"],
	...	[3, 4, 5]
	... ]
	>>> matrix_divided(matrix, 4)
	Traceback (most recent call last):
		...
	TypeError: matrix must be a matrix (list of lists) of integers/floats

Case 3: When a non `int` or non `float` is pass as `div` argument

	>>> matrix = [
	...	[1, 2, 3],
	...	[4, 5, 6]
	... ]
	>>> matrix_divided(matrix, "5")
	Traceback (most recent call last):
		...
	TypeError: div must be a number
	
Case 4: when zero `0` is psssed as a `div` argument

	>>> matrix_divided(matrix, 0)
	Traceback (most recent call last):
		...
	ZeroDivisionError: division by zero

Case 5: Check for the correct output

	>>> matrix_divided(matrix, 3)
	[[0.33, 0.67, 1.0], [1.33, 1.67, 2.0]]
	>>> matrix
	[[1, 2, 3], [4, 5, 6]]

Case 6: When the row of doesn't have the same size

	>>> matrix = [
	... 	[1, 3, 5, 6],
	... 	[7, 8, 2],
	... 	[2, 3, 4]
	... ]
	>>> matrix_divided(matrix, 2.25)
	Traceback (most recent call last):
		...
	TypeError: Each row of the matrix must have the same size
